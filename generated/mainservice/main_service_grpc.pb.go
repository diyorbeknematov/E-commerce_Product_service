// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: product-service/main_service.proto

package mainservice

import (
	context "context"
	categories "product-service/generated/categories"
	products "product-service/generated/products"
	reviews "product-service/generated/reviews"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MainService_CreateProduct_FullMethodName         = "/main_service.MainService/CreateProduct"
	MainService_UpdateProduct_FullMethodName         = "/main_service.MainService/UpdateProduct"
	MainService_DeleteProduct_FullMethodName         = "/main_service.MainService/DeleteProduct"
	MainService_GetAllProduct_FullMethodName         = "/main_service.MainService/GetAllProduct"
	MainService_GetByIdProduct_FullMethodName        = "/main_service.MainService/GetByIdProduct"
	MainService_CreateOrder_FullMethodName           = "/main_service.MainService/CreateOrder"
	MainService_GetOrderByPId_FullMethodName         = "/main_service.MainService/GetOrderByPId"
	MainService_AddToBasket_FullMethodName           = "/main_service.MainService/AddToBasket"
	MainService_GetBasketProducts_FullMethodName     = "/main_service.MainService/GetBasketProducts"
	MainService_DeleteBasketProduct_FullMethodName   = "/main_service.MainService/DeleteBasketProduct"
	MainService_GetUserRecommendation_FullMethodName = "/main_service.MainService/GetUserRecommendation"
	MainService_GetPurchasedProducts_FullMethodName  = "/main_service.MainService/GetPurchasedProducts"
	MainService_GetAllCategories_FullMethodName      = "/main_service.MainService/GetAllCategories"
	MainService_CreateCategory_FullMethodName        = "/main_service.MainService/CreateCategory"
	MainService_UpdateCategory_FullMethodName        = "/main_service.MainService/UpdateCategory"
	MainService_DeleteCategory_FullMethodName        = "/main_service.MainService/DeleteCategory"
	MainService_GetAllReviews_FullMethodName         = "/main_service.MainService/GetAllReviews"
	MainService_GetReviewsByProductId_FullMethodName = "/main_service.MainService/GetReviewsByProductId"
	MainService_CreateReview_FullMethodName          = "/main_service.MainService/CreateReview"
	MainService_UpdateReview_FullMethodName          = "/main_service.MainService/UpdateReview"
	MainService_DeleteReview_FullMethodName          = "/main_service.MainService/DeleteReview"
)

// MainServiceClient is the client API for MainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainServiceClient interface {
	// Mahsulotlar bilan bog'liq endpointlar
	CreateProduct(ctx context.Context, in *products.CreateProductRequest, opts ...grpc.CallOption) (*products.CreateProductResponse, error)
	UpdateProduct(ctx context.Context, in *products.UpdateProductRequest, opts ...grpc.CallOption) (*products.UpdateProductResponse, error)
	DeleteProduct(ctx context.Context, in *products.DeleteProductRequest, opts ...grpc.CallOption) (*products.DeleteProductResponse, error)
	GetAllProduct(ctx context.Context, in *products.GetAllProductRequest, opts ...grpc.CallOption) (*products.GetAllProductResponse, error)
	GetByIdProduct(ctx context.Context, in *products.GetByIdProductRequest, opts ...grpc.CallOption) (*products.GetByIdProductResponse, error)
	CreateOrder(ctx context.Context, in *products.Order, opts ...grpc.CallOption) (*products.OrderResponse, error)
	GetOrderByPId(ctx context.Context, in *products.GetOrderByPIdRequest, opts ...grpc.CallOption) (*products.GetOrderByPIdResponse, error)
	AddToBasket(ctx context.Context, in *products.AddToBasketRequest, opts ...grpc.CallOption) (*products.AddToBasketResponse, error)
	GetBasketProducts(ctx context.Context, in *products.GetBasketRequest, opts ...grpc.CallOption) (*products.BasketResponse, error)
	DeleteBasketProduct(ctx context.Context, in *products.DeleteBasketRequest, opts ...grpc.CallOption) (*products.DeleteBasketResponse, error)
	GetUserRecommendation(ctx context.Context, in *products.Void, opts ...grpc.CallOption) (*products.GetRecommendationsResponse, error)
	GetPurchasedProducts(ctx context.Context, in *products.GetPurchasedPRequest, opts ...grpc.CallOption) (*products.GetPurchasedPResponse, error)
	// Kategoriyalar bilan bog'liq endpointlar
	GetAllCategories(ctx context.Context, in *categories.GetAllCategoryRequest, opts ...grpc.CallOption) (*categories.GetAllCategoryResponse, error)
	CreateCategory(ctx context.Context, in *categories.CreateCategoryRequest, opts ...grpc.CallOption) (*categories.CreateCategoryResponse, error)
	UpdateCategory(ctx context.Context, in *categories.UpdateCategoryRequest, opts ...grpc.CallOption) (*categories.UpdateCategoryResponse, error)
	DeleteCategory(ctx context.Context, in *categories.DeleteCategoryRequest, opts ...grpc.CallOption) (*categories.DeleteCategoryResponse, error)
	// Sharhlar bilan bog'liq endpointlar
	GetAllReviews(ctx context.Context, in *reviews.GetAllReviewsRequest, opts ...grpc.CallOption) (*reviews.GetAllReviewsResponse, error)
	GetReviewsByProductId(ctx context.Context, in *reviews.GetReviewsByPIdRequest, opts ...grpc.CallOption) (*reviews.GetReviewsByPIdResponse, error)
	CreateReview(ctx context.Context, in *reviews.CreateReviewRequest, opts ...grpc.CallOption) (*reviews.CreateReviewResponse, error)
	UpdateReview(ctx context.Context, in *reviews.UpdateReviewRequest, opts ...grpc.CallOption) (*reviews.UpdateReviewResponse, error)
	DeleteReview(ctx context.Context, in *reviews.DeleteReviewRequest, opts ...grpc.CallOption) (*reviews.DeleteReviewResponse, error)
}

type mainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMainServiceClient(cc grpc.ClientConnInterface) MainServiceClient {
	return &mainServiceClient{cc}
}

func (c *mainServiceClient) CreateProduct(ctx context.Context, in *products.CreateProductRequest, opts ...grpc.CallOption) (*products.CreateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.CreateProductResponse)
	err := c.cc.Invoke(ctx, MainService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateProduct(ctx context.Context, in *products.UpdateProductRequest, opts ...grpc.CallOption) (*products.UpdateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.UpdateProductResponse)
	err := c.cc.Invoke(ctx, MainService_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteProduct(ctx context.Context, in *products.DeleteProductRequest, opts ...grpc.CallOption) (*products.DeleteProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.DeleteProductResponse)
	err := c.cc.Invoke(ctx, MainService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetAllProduct(ctx context.Context, in *products.GetAllProductRequest, opts ...grpc.CallOption) (*products.GetAllProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.GetAllProductResponse)
	err := c.cc.Invoke(ctx, MainService_GetAllProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetByIdProduct(ctx context.Context, in *products.GetByIdProductRequest, opts ...grpc.CallOption) (*products.GetByIdProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.GetByIdProductResponse)
	err := c.cc.Invoke(ctx, MainService_GetByIdProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateOrder(ctx context.Context, in *products.Order, opts ...grpc.CallOption) (*products.OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.OrderResponse)
	err := c.cc.Invoke(ctx, MainService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetOrderByPId(ctx context.Context, in *products.GetOrderByPIdRequest, opts ...grpc.CallOption) (*products.GetOrderByPIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.GetOrderByPIdResponse)
	err := c.cc.Invoke(ctx, MainService_GetOrderByPId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) AddToBasket(ctx context.Context, in *products.AddToBasketRequest, opts ...grpc.CallOption) (*products.AddToBasketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.AddToBasketResponse)
	err := c.cc.Invoke(ctx, MainService_AddToBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetBasketProducts(ctx context.Context, in *products.GetBasketRequest, opts ...grpc.CallOption) (*products.BasketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.BasketResponse)
	err := c.cc.Invoke(ctx, MainService_GetBasketProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteBasketProduct(ctx context.Context, in *products.DeleteBasketRequest, opts ...grpc.CallOption) (*products.DeleteBasketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.DeleteBasketResponse)
	err := c.cc.Invoke(ctx, MainService_DeleteBasketProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetUserRecommendation(ctx context.Context, in *products.Void, opts ...grpc.CallOption) (*products.GetRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.GetRecommendationsResponse)
	err := c.cc.Invoke(ctx, MainService_GetUserRecommendation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetPurchasedProducts(ctx context.Context, in *products.GetPurchasedPRequest, opts ...grpc.CallOption) (*products.GetPurchasedPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(products.GetPurchasedPResponse)
	err := c.cc.Invoke(ctx, MainService_GetPurchasedProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetAllCategories(ctx context.Context, in *categories.GetAllCategoryRequest, opts ...grpc.CallOption) (*categories.GetAllCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(categories.GetAllCategoryResponse)
	err := c.cc.Invoke(ctx, MainService_GetAllCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateCategory(ctx context.Context, in *categories.CreateCategoryRequest, opts ...grpc.CallOption) (*categories.CreateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(categories.CreateCategoryResponse)
	err := c.cc.Invoke(ctx, MainService_CreateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateCategory(ctx context.Context, in *categories.UpdateCategoryRequest, opts ...grpc.CallOption) (*categories.UpdateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(categories.UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, MainService_UpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteCategory(ctx context.Context, in *categories.DeleteCategoryRequest, opts ...grpc.CallOption) (*categories.DeleteCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(categories.DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, MainService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetAllReviews(ctx context.Context, in *reviews.GetAllReviewsRequest, opts ...grpc.CallOption) (*reviews.GetAllReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(reviews.GetAllReviewsResponse)
	err := c.cc.Invoke(ctx, MainService_GetAllReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetReviewsByProductId(ctx context.Context, in *reviews.GetReviewsByPIdRequest, opts ...grpc.CallOption) (*reviews.GetReviewsByPIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(reviews.GetReviewsByPIdResponse)
	err := c.cc.Invoke(ctx, MainService_GetReviewsByProductId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateReview(ctx context.Context, in *reviews.CreateReviewRequest, opts ...grpc.CallOption) (*reviews.CreateReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(reviews.CreateReviewResponse)
	err := c.cc.Invoke(ctx, MainService_CreateReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateReview(ctx context.Context, in *reviews.UpdateReviewRequest, opts ...grpc.CallOption) (*reviews.UpdateReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(reviews.UpdateReviewResponse)
	err := c.cc.Invoke(ctx, MainService_UpdateReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteReview(ctx context.Context, in *reviews.DeleteReviewRequest, opts ...grpc.CallOption) (*reviews.DeleteReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(reviews.DeleteReviewResponse)
	err := c.cc.Invoke(ctx, MainService_DeleteReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainServiceServer is the server API for MainService service.
// All implementations must embed UnimplementedMainServiceServer
// for forward compatibility
type MainServiceServer interface {
	// Mahsulotlar bilan bog'liq endpointlar
	CreateProduct(context.Context, *products.CreateProductRequest) (*products.CreateProductResponse, error)
	UpdateProduct(context.Context, *products.UpdateProductRequest) (*products.UpdateProductResponse, error)
	DeleteProduct(context.Context, *products.DeleteProductRequest) (*products.DeleteProductResponse, error)
	GetAllProduct(context.Context, *products.GetAllProductRequest) (*products.GetAllProductResponse, error)
	GetByIdProduct(context.Context, *products.GetByIdProductRequest) (*products.GetByIdProductResponse, error)
	CreateOrder(context.Context, *products.Order) (*products.OrderResponse, error)
	GetOrderByPId(context.Context, *products.GetOrderByPIdRequest) (*products.GetOrderByPIdResponse, error)
	AddToBasket(context.Context, *products.AddToBasketRequest) (*products.AddToBasketResponse, error)
	GetBasketProducts(context.Context, *products.GetBasketRequest) (*products.BasketResponse, error)
	DeleteBasketProduct(context.Context, *products.DeleteBasketRequest) (*products.DeleteBasketResponse, error)
	GetUserRecommendation(context.Context, *products.Void) (*products.GetRecommendationsResponse, error)
	GetPurchasedProducts(context.Context, *products.GetPurchasedPRequest) (*products.GetPurchasedPResponse, error)
	// Kategoriyalar bilan bog'liq endpointlar
	GetAllCategories(context.Context, *categories.GetAllCategoryRequest) (*categories.GetAllCategoryResponse, error)
	CreateCategory(context.Context, *categories.CreateCategoryRequest) (*categories.CreateCategoryResponse, error)
	UpdateCategory(context.Context, *categories.UpdateCategoryRequest) (*categories.UpdateCategoryResponse, error)
	DeleteCategory(context.Context, *categories.DeleteCategoryRequest) (*categories.DeleteCategoryResponse, error)
	// Sharhlar bilan bog'liq endpointlar
	GetAllReviews(context.Context, *reviews.GetAllReviewsRequest) (*reviews.GetAllReviewsResponse, error)
	GetReviewsByProductId(context.Context, *reviews.GetReviewsByPIdRequest) (*reviews.GetReviewsByPIdResponse, error)
	CreateReview(context.Context, *reviews.CreateReviewRequest) (*reviews.CreateReviewResponse, error)
	UpdateReview(context.Context, *reviews.UpdateReviewRequest) (*reviews.UpdateReviewResponse, error)
	DeleteReview(context.Context, *reviews.DeleteReviewRequest) (*reviews.DeleteReviewResponse, error)
	mustEmbedUnimplementedMainServiceServer()
}

// UnimplementedMainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMainServiceServer struct {
}

func (UnimplementedMainServiceServer) CreateProduct(context.Context, *products.CreateProductRequest) (*products.CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedMainServiceServer) UpdateProduct(context.Context, *products.UpdateProductRequest) (*products.UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedMainServiceServer) DeleteProduct(context.Context, *products.DeleteProductRequest) (*products.DeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedMainServiceServer) GetAllProduct(context.Context, *products.GetAllProductRequest) (*products.GetAllProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProduct not implemented")
}
func (UnimplementedMainServiceServer) GetByIdProduct(context.Context, *products.GetByIdProductRequest) (*products.GetByIdProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdProduct not implemented")
}
func (UnimplementedMainServiceServer) CreateOrder(context.Context, *products.Order) (*products.OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedMainServiceServer) GetOrderByPId(context.Context, *products.GetOrderByPIdRequest) (*products.GetOrderByPIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByPId not implemented")
}
func (UnimplementedMainServiceServer) AddToBasket(context.Context, *products.AddToBasketRequest) (*products.AddToBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBasket not implemented")
}
func (UnimplementedMainServiceServer) GetBasketProducts(context.Context, *products.GetBasketRequest) (*products.BasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasketProducts not implemented")
}
func (UnimplementedMainServiceServer) DeleteBasketProduct(context.Context, *products.DeleteBasketRequest) (*products.DeleteBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBasketProduct not implemented")
}
func (UnimplementedMainServiceServer) GetUserRecommendation(context.Context, *products.Void) (*products.GetRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRecommendation not implemented")
}
func (UnimplementedMainServiceServer) GetPurchasedProducts(context.Context, *products.GetPurchasedPRequest) (*products.GetPurchasedPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasedProducts not implemented")
}
func (UnimplementedMainServiceServer) GetAllCategories(context.Context, *categories.GetAllCategoryRequest) (*categories.GetAllCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (UnimplementedMainServiceServer) CreateCategory(context.Context, *categories.CreateCategoryRequest) (*categories.CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedMainServiceServer) UpdateCategory(context.Context, *categories.UpdateCategoryRequest) (*categories.UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedMainServiceServer) DeleteCategory(context.Context, *categories.DeleteCategoryRequest) (*categories.DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedMainServiceServer) GetAllReviews(context.Context, *reviews.GetAllReviewsRequest) (*reviews.GetAllReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReviews not implemented")
}
func (UnimplementedMainServiceServer) GetReviewsByProductId(context.Context, *reviews.GetReviewsByPIdRequest) (*reviews.GetReviewsByPIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewsByProductId not implemented")
}
func (UnimplementedMainServiceServer) CreateReview(context.Context, *reviews.CreateReviewRequest) (*reviews.CreateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedMainServiceServer) UpdateReview(context.Context, *reviews.UpdateReviewRequest) (*reviews.UpdateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedMainServiceServer) DeleteReview(context.Context, *reviews.DeleteReviewRequest) (*reviews.DeleteReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedMainServiceServer) mustEmbedUnimplementedMainServiceServer() {}

// UnsafeMainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainServiceServer will
// result in compilation errors.
type UnsafeMainServiceServer interface {
	mustEmbedUnimplementedMainServiceServer()
}

func RegisterMainServiceServer(s grpc.ServiceRegistrar, srv MainServiceServer) {
	s.RegisterService(&MainService_ServiceDesc, srv)
}

func _MainService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateProduct(ctx, req.(*products.CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateProduct(ctx, req.(*products.UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteProduct(ctx, req.(*products.DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetAllProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.GetAllProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetAllProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetAllProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetAllProduct(ctx, req.(*products.GetAllProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetByIdProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.GetByIdProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetByIdProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetByIdProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetByIdProduct(ctx, req.(*products.GetByIdProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateOrder(ctx, req.(*products.Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetOrderByPId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.GetOrderByPIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetOrderByPId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetOrderByPId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetOrderByPId(ctx, req.(*products.GetOrderByPIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_AddToBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.AddToBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).AddToBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_AddToBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).AddToBasket(ctx, req.(*products.AddToBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetBasketProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.GetBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetBasketProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetBasketProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetBasketProducts(ctx, req.(*products.GetBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteBasketProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.DeleteBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteBasketProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteBasketProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteBasketProduct(ctx, req.(*products.DeleteBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetUserRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetUserRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetUserRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetUserRecommendation(ctx, req.(*products.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetPurchasedProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(products.GetPurchasedPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetPurchasedProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetPurchasedProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetPurchasedProducts(ctx, req.(*products.GetPurchasedPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetAllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(categories.GetAllCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetAllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetAllCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetAllCategories(ctx, req.(*categories.GetAllCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(categories.CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateCategory(ctx, req.(*categories.CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(categories.UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateCategory(ctx, req.(*categories.UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(categories.DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteCategory(ctx, req.(*categories.DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetAllReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(reviews.GetAllReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetAllReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetAllReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetAllReviews(ctx, req.(*reviews.GetAllReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetReviewsByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(reviews.GetReviewsByPIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetReviewsByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetReviewsByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetReviewsByProductId(ctx, req.(*reviews.GetReviewsByPIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(reviews.CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateReview(ctx, req.(*reviews.CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(reviews.UpdateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateReview(ctx, req.(*reviews.UpdateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(reviews.DeleteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteReview(ctx, req.(*reviews.DeleteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MainService_ServiceDesc is the grpc.ServiceDesc for MainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main_service.MainService",
	HandlerType: (*MainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _MainService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _MainService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _MainService_DeleteProduct_Handler,
		},
		{
			MethodName: "GetAllProduct",
			Handler:    _MainService_GetAllProduct_Handler,
		},
		{
			MethodName: "GetByIdProduct",
			Handler:    _MainService_GetByIdProduct_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _MainService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderByPId",
			Handler:    _MainService_GetOrderByPId_Handler,
		},
		{
			MethodName: "AddToBasket",
			Handler:    _MainService_AddToBasket_Handler,
		},
		{
			MethodName: "GetBasketProducts",
			Handler:    _MainService_GetBasketProducts_Handler,
		},
		{
			MethodName: "DeleteBasketProduct",
			Handler:    _MainService_DeleteBasketProduct_Handler,
		},
		{
			MethodName: "GetUserRecommendation",
			Handler:    _MainService_GetUserRecommendation_Handler,
		},
		{
			MethodName: "GetPurchasedProducts",
			Handler:    _MainService_GetPurchasedProducts_Handler,
		},
		{
			MethodName: "GetAllCategories",
			Handler:    _MainService_GetAllCategories_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _MainService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _MainService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _MainService_DeleteCategory_Handler,
		},
		{
			MethodName: "GetAllReviews",
			Handler:    _MainService_GetAllReviews_Handler,
		},
		{
			MethodName: "GetReviewsByProductId",
			Handler:    _MainService_GetReviewsByProductId_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _MainService_CreateReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _MainService_UpdateReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _MainService_DeleteReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product-service/main_service.proto",
}
